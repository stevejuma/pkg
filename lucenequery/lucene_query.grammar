/*
 * Lucene Query Grammar for PEG.js
 * ========================================
 *
 * This grammar supports many of the constructs contained in the Lucene Query Syntax.
 *
 * Supported features:
 * - conjunction operators (AND, OR, ||, &&, NOT)
 * - prefix operators (+, -)
 * - quoted values ("foo bar")
 * - named fields (foo:bar)
 * - range expressions (foo:[bar TO baz], foo:{bar TO baz})
 * - equality comparators foo: >= 12, foo: <= 5, foo > 0
 * - parentheses grouping ( (foo OR bar) AND baz )
 * - field groups ( foo:(bar OR baz) )
 *
 * The grammar will create a parser which returns an AST for the query in the form of a tree
 * of nodes, which are structs. There are three basic types of structs:
 *
 * A boolean expression generally has the following structure:
 *
 * BooleanExpression{
 *     'Op' : string             // operator value
 *     'Args': interface{},      // the comparators for the operator
 * }
 *
 *
 * A TermQuery expression has the following structure:
 *
 * TermQuery{
 *     'Value': string,         // field value
 *     'Term': string,          // field name
 *     'Prefix': string         // prefix operator (+/-) [OPTIONAL]
 *     'Op': string             // the type of comparison operator (gt/gte/lt/lte/in)) [OPTIONAL]
 * }
 *
 *
 * A RangeQuery expression has the following structure:
 *
 * {
 *     'Term': string,               // field name
 *     'Min': string/int/float,      // minimum value (left side) of range
 *     'Max': string/int/float,      // maximum value (right side) of range
 *     'Inclusive': boolean          // inclusive ([...]) or exclusive ({...})
 * }
 *
 * Other Notes:
 *
 * - For any field name, unnamed/default fields will have the value "".
 * - Wildcards (f?o) will be part of the term value.
 * - Escaping quotes is supported (quote: "a walk in the \"park\"")
 * - Conjunction operators that appear at the beginning of the query violate the logic of the
 *   syntax, and are currently "mostly" ignored. The last element will be returned.
 *
 */
{
package lucenequery

func toFlatSlice(arr []interface{}) interface{} {
	if len(arr) == 1 {
		return arr[0]
	}
	return arr
}

func toIfaceStr(v interface{}) string {
	if v == nil {
		return ""
	}
	if s, ok := v.(string); ok {
		return s
	}
	if s, ok := v.([]byte); ok {
		return string(s)
	}
	return ""
}

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}


func updateFieldName(v interface{}, name string) interface{}{
    if list, ok := v.([]interface{}); ok {
        arr :=  []interface{}{}
        for _, row := range list {
            arr = append(arr, updateFieldName(row, name))
        }
        return arr
    }
    switch t := v.(type) {
        case TermQuery:
            if t.Term == "" { t.Term = name }
            return t
        case BooleanExpression:
            t.Args = updateFieldName(t.Args, name).([]interface{})
            return t
        case *BooleanExpression:
            t.Args = updateFieldName(t.Args, name).([]interface{})
            return t
    }
    return v
}

// WildCardQuery is a wildcard query term *
type WildCardQuery struct {
    Prefix string `json:"prefix,omitempty"`
    Suffix string `json:"suffix,omitempty"`
    Term   string `json:"term,omitempty"`
}

func (q *WildCardQuery) Kind() string {
    if q.Term != "" {
        return "any"
    }
    if q.Prefix != "" && q.Suffix != "" {
        return "between"
    }else if q.Prefix != "" {
        return "prefix"
    }else if q.Suffix != "" {
        return "suffix"
    }
    return "wildcard"
}

//RangeQuery is a query for a value range
type RangeQuery struct {
    Min interface{} `json:"min,omitempty"`
    Max interface{} `json:"max,omitempty"`
    Term string `json:"term,omitempty"`
    Inclusive bool `json:"inclusive"`
}

// HasMin returns true if the range has a minimum set
func (q *RangeQuery) HasMin() (bool) {
    return q.Min != nil && fmt.Sprintf("%v", q.Min) != "*"
}

// HasMax returns true if the range has a maximum set
func (q *RangeQuery) HasMax() (bool) {
    return q.Max != nil && fmt.Sprintf("%v", q.Max) != "*"
}

// Kind returns the type of range query this is
func (q *RangeQuery) Kind() (string, error) {
    min, max := q.HasMin(), q.HasMax()
    var kind string
    if min && max {
        return "between", nil
    }else if min && !max {
        kind = "gt"
    }else if max && !min {
        kind = "lt"
    }
    if q.Inclusive {
        kind = kind + "e"
    }
    return kind, nil
}

// TermQuery represents a query for a term
type TermQuery struct {
    Term string `json:"term,omitempty"`
    Prefix string `json:"prefix,omitempty"`
    Op string  `json:"op,omitempty"`
    Value interface{} `json:"value,omitempty"`
}

// Query returns the effective query for this term query
func (t *TermQuery) Query() interface{} {
    switch op := t.Op;  op {
        case "gt":
            return RangeQuery{
                Term: t.Term,
                Min:       t.Value,
                Max: "*",
                Inclusive: false,
            }
        case "gte":
            return RangeQuery{
                Term: t.Term,
                Min:       t.Value,
                Max: "*",
                Inclusive: true,
            }
        case "lt":
            return  RangeQuery{
                Term: t.Term,
                Min: "*",
                Max:       t.Value,
                Inclusive: false,
            }
        case "lte":
            return  RangeQuery{
                Term: t.Term,
                Min: "*",
                Max:       t.Value,
                Inclusive: true,
            }
        default:
            return *t
    }
}

// BooleanExpression represents a boolean filter
type BooleanExpression struct {
    Op string `json:"op,omitempty"`
    Args []interface{} `json:"args,omitempty"`
}

}

Start
  = _* node:Node+
    {
        return toFlatSlice(toIfaceSlice(node)), nil
    }
  / _*
    {
        return nil, errors.New("invalid query")
    }
  / EOF
    {
        return nil, errors.New("invalid query")
    }

Node
  = operator:OperatorExp EOF
    {
        return BooleanExpression{
           Op: toIfaceStr(operator),
       }, nil
    }
  / operator:OperatorExp right:Node
    {
        return right, nil
    }
 / left:GroupExp op:OperatorExp? right:Node+
    {
       operator := strings.TrimSpace(toIfaceStr(op))
       if operator == "" {
           operator = "IMPLICIT"
       }
       ex := BooleanExpression{
           Op: operator,
       }
       var args []interface{}

       if l, ok := left.([]interface{}); ok {
           args = append(args, l...)
       }else {
            args = append(args, left)
       }
       for _, s:= range toIfaceSlice(right) {
           if l, ok := s.([]interface{}); ok {
               args = append(args, l...)
           }else {
               args = append(args, s)
           }
       }
       ex.Args = args
       return ex, nil
    }
 / ex:GroupExp
    {
       return ex, nil
    }

GroupExp
  = exp:FieldExp _*
    {
        return exp, nil
    }
  / ParenExp

ParenExp
  = "(" node:Node+ ")" _*
    {
        if n, ok := node.([]interface{}); ok && len(n) == 1 {
            return n[0], nil
        }
        return node, nil
    }

FieldExp
  = fieldname:Fieldname? _* arr:ArrayExp
    {
        return TermQuery{
            Term: toIfaceStr(fieldname),
            Value: arr,
            Prefix: "",
            Op:  "in",
        }, nil
    }
  / fieldname:Fieldname? _* rangeValue:RangeOperatorExp
    {
        r, ok := rangeValue.(RangeQuery)
        if !ok {
            return nil, errors.New("invalid range")
        }
        r.Term = toIfaceStr(fieldname)
        return r, nil
    }
  / fieldname:Fieldname _* node:ParenExp
    {
        field := toIfaceStr(fieldname)
        if n, ok := node.(TermQuery); ok {
            n.Term = field
            return n.Query(), nil
        }
        return updateFieldName(node, field), nil
    }
  / fieldname:Fieldname? _* term:Term
    {
       t := term.(TermQuery)
       t.Term = toIfaceStr(fieldname)
       return t.Query(), nil
    }

Fieldname
  = fieldname:(UnquotedTerm / QuotedTerm) [:]
    {
        return fieldname, nil
    }

Term
  = eq:EqualityExpr? term:DecimalOrIntExp _*
    {
        return TermQuery{
            Value: term,
            Op: toIfaceStr(eq),
        }, nil
    }
  / eq:EqualityExpr? op:PrefixOperatorExp? term:(Null / Bool / DecimalOrIntExp / WildCardExp / QuotedTerm / UnquotedTerm) _*
      {
        return TermQuery{
            Value: term,
            Prefix: toIfaceStr(op),
            Op: toIfaceStr(eq),
        }, nil
    }

UnquotedTerm
  = term:TermChar+
    {
        return string(c.text), nil;
    }

TermChar
  = '.' / [^: \t\r\n)({}"^~\\[\]*+-]

QuotedTerm
  = '"' (!EscapedChar . / '\\' EscapeSequence)* '"'
    {
        c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
        return strconv.Unquote(string(c.text))
    }

ArrayValue <- val:(Null / Bool /DecimalOrIntExp / QuotedTerm / UnquotedTerm ) _* {
    return val, nil
}

ArrayExp <- '[' _* vals:(ArrayValue (',' _* ArrayValue)*)? _* ']' {
    valsSl := toIfaceSlice(vals)
    if len(valsSl) == 0 {
        return []interface{}{}, nil
    }
    res := []interface{}{valsSl[0]}
    restSl := toIfaceSlice(valsSl[1])
    for _, v := range restSl {
        vSl := toIfaceSlice(v)
        res = append(res, vSl[2])
    }
    return res, nil
}

DecimalOrIntExp
 = DecimalExp
 / IntExp


DecimalExp
 = '-'? [0-9]+ '.' [0-9]+
    {
        return strconv.ParseFloat(strings.TrimSpace(toIfaceStr(c.text)), 64)
    }

IntExp
  = '-'? [0-9]+
    {
        return  strconv.Atoi(string(c.text))
    }

RangeOperatorExp
  =  '['  _* termMin:(DecimalOrIntExp / WildCard / UnquotedTerm / QuotedTerm) _* "TO" _+ termMax:(DecimalOrIntExp / WildCard / UnquotedTerm / QuotedTerm) ']'
     {
        return RangeQuery{
            Min:       termMin,
            Max:       termMax,
            Inclusive: true,
        }, nil
    }
  / '{' termMin:(DecimalOrIntExp / WildCard / UnquotedTerm / QuotedTerm) _* "TO" _+ termMax:(DecimalOrIntExp / WildCard / UnquotedTerm / QuotedTerm)  '}'
    {
        return RangeQuery{
            Min:       termMin,
            Max:       termMax,
            Inclusive: false,
        }, nil
    }

OperatorExp
  = _* operator:Operator _+
    {
        return toIfaceStr(operator), nil
    }
  / _* operator:Operator EOF
    {
        return toIfaceStr(operator), nil
    }

EqualityExpr
    = _* eq:Equality _*
    {
        return toIfaceStr(eq), nil
    }


Equality
    = ">="  { return "gte", nil }
    / ">"   { return "gt",  nil }
    / "<="  { return "lte", nil }
    / "<"   { return "lt",  nil }
    / "!=" {  return "neq", nil }
    / "!~*" { return "!~*", nil }
    / "!~"  { return "!~",  nil }
    / "~*"  { return "~*",  nil }
    / "~"   { return "~",   nil }
    / "gte"
    / "gt"
    / "lte"
    / "lt"
    / "eq"
    / "neq"

Operator
  = "OR"
  / "AND"
  / "NOT"
  / "||"  { return "OR", nil }
  / "&&"  { return "AND", nil }
  / "and" { return "AND", nil }
  / "or"  { return "OR", nil }
  / "not" { return "NOT", nil }

PrefixOperatorExp
  = _* operator:PrefixOperator
    {
        return toIfaceStr(operator), nil
    }

PrefixOperator
  = '+'
  / '-'

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u'

Bool <- "true" { return true, nil } / "false" { return false, nil }

Null <- "null" { return nil, nil }

WildCard <- '*' { return "*", nil }

WildCardExp
    =
     prefix:(UnquotedTerm / QuotedTerm) WildCard suffix:(UnquotedTerm / QuotedTerm)  { return WildCardQuery{Prefix: toIfaceStr(prefix), Suffix: toIfaceStr(suffix)}, nil }
    / term:(UnquotedTerm / QuotedTerm) WildCard  { return WildCardQuery{Prefix: toIfaceStr(term)}, nil }
    / WildCard term:(UnquotedTerm / QuotedTerm) WildCard { return WildCardQuery{Term: toIfaceStr(term)}, nil }
    / WildCard term:(UnquotedTerm / QuotedTerm)  { return WildCardQuery{Suffix: toIfaceStr(term)}, nil }
    / WildCard  { return WildCardQuery{}, nil }

_ "whitespace" <- [ \t\r\n]+

EOF <- !.