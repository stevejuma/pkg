// Code generated by pigeon; DO NOT EDIT.

package lucenequery

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func toFlatSlice(arr []interface{}) interface{} {
	if len(arr) == 1 {
		return arr[0]
	}
	return arr
}

func toIfaceStr(v interface{}) string {
	if v == nil {
		return ""
	}
	if s, ok := v.(string); ok {
		return s
	}
	if s, ok := v.([]byte); ok {
		return string(s)
	}
	return ""
}

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func updateFieldName(v interface{}, name string) interface{} {
	if list, ok := v.([]interface{}); ok {
		arr := []interface{}{}
		for _, row := range list {
			arr = append(arr, updateFieldName(row, name))
		}
		return arr
	}
	switch t := v.(type) {
	case TermQuery:
		if t.Term == "" {
			t.Term = name
		}
		return t
	case BooleanExpression:
		t.Args = updateFieldName(t.Args, name).([]interface{})
		return t
	case *BooleanExpression:
		t.Args = updateFieldName(t.Args, name).([]interface{})
		return t
	}
	return v
}

// WildCardQuery is a wildcard query term *
type WildCardQuery struct {
	Prefix string `json:"prefix,omitempty"`
	Suffix string `json:"suffix,omitempty"`
	Term   string `json:"term,omitempty"`
}

func (q *WildCardQuery) Kind() string {
	if q.Term != "" {
		return "any"
	}
	if q.Prefix != "" && q.Suffix != "" {
		return "between"
	} else if q.Prefix != "" {
		return "prefix"
	} else if q.Suffix != "" {
		return "suffix"
	}
	return "wildcard"
}

//RangeQuery is a query for a value range
type RangeQuery struct {
	Min       interface{} `json:"min,omitempty"`
	Max       interface{} `json:"max,omitempty"`
	Term      string      `json:"term,omitempty"`
	Inclusive bool        `json:"inclusive"`
}

// HasMin returns true if the range has a minimum set
func (q *RangeQuery) HasMin() bool {
	return q.Min != nil && fmt.Sprintf("%v", q.Min) != "*"
}

// HasMax returns true if the range has a maximum set
func (q *RangeQuery) HasMax() bool {
	return q.Max != nil && fmt.Sprintf("%v", q.Max) != "*"
}

// Kind returns the type of range query this is
func (q *RangeQuery) Kind() (string, error) {
	min, max := q.HasMin(), q.HasMax()
	var kind string
	if min && max {
		return "between", nil
	} else if min && !max {
		kind = "gt"
	} else if max && !min {
		kind = "lt"
	}
	if q.Inclusive {
		kind = kind + "e"
	}
	return kind, nil
}

// TermQuery represents a query for a term
type TermQuery struct {
	Term   string      `json:"term,omitempty"`
	Prefix string      `json:"prefix,omitempty"`
	Op     string      `json:"op,omitempty"`
	Value  interface{} `json:"value,omitempty"`
}

// Query returns the effective query for this term query
func (t *TermQuery) Query() interface{} {
	switch op := t.Op; op {
	case "gt":
		return RangeQuery{
			Term:      t.Term,
			Min:       t.Value,
			Max:       "*",
			Inclusive: false,
		}
	case "gte":
		return RangeQuery{
			Term:      t.Term,
			Min:       t.Value,
			Max:       "*",
			Inclusive: true,
		}
	case "lt":
		return RangeQuery{
			Term:      t.Term,
			Min:       "*",
			Max:       t.Value,
			Inclusive: false,
		}
	case "lte":
		return RangeQuery{
			Term:      t.Term,
			Min:       "*",
			Max:       t.Value,
			Inclusive: true,
		}
	default:
		return *t
	}
}

// BooleanExpression represents a boolean filter
type BooleanExpression struct {
	Op   string        `json:"op,omitempty"`
	Args []interface{} `json:"args,omitempty"`
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 217, col: 1, offset: 5857},
			expr: &choiceExpr{
				pos: position{line: 218, col: 5, offset: 5867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 218, col: 5, offset: 5867},
						run: (*parser).callonStart2,
						expr: &seqExpr{
							pos: position{line: 218, col: 5, offset: 5867},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 218, col: 5, offset: 5867},
									expr: &ruleRefExpr{
										pos:  position{line: 218, col: 5, offset: 5867},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 218, col: 8, offset: 5870},
									label: "node",
									expr: &oneOrMoreExpr{
										pos: position{line: 218, col: 13, offset: 5875},
										expr: &ruleRefExpr{
											pos:  position{line: 218, col: 13, offset: 5875},
											name: "Node",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 5949},
						run: (*parser).callonStart9,
						expr: &zeroOrMoreExpr{
							pos: position{line: 222, col: 5, offset: 5949},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 5, offset: 5949},
								name: "_",
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 6016},
						run: (*parser).callonStart12,
						expr: &ruleRefExpr{
							pos:  position{line: 226, col: 5, offset: 6016},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Node",
			pos:  position{line: 231, col: 1, offset: 6081},
			expr: &choiceExpr{
				pos: position{line: 232, col: 5, offset: 6090},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 6090},
						run: (*parser).callonNode2,
						expr: &seqExpr{
							pos: position{line: 232, col: 5, offset: 6090},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 232, col: 5, offset: 6090},
									label: "operator",
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 14, offset: 6099},
										name: "OperatorExp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 26, offset: 6111},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 6216},
						run: (*parser).callonNode7,
						expr: &seqExpr{
							pos: position{line: 238, col: 5, offset: 6216},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 238, col: 5, offset: 6216},
									label: "operator",
									expr: &ruleRefExpr{
										pos:  position{line: 238, col: 14, offset: 6225},
										name: "OperatorExp",
									},
								},
								&labeledExpr{
									pos:   position{line: 238, col: 26, offset: 6237},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 238, col: 32, offset: 6243},
										name: "Node",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 4, offset: 6289},
						run: (*parser).callonNode13,
						expr: &seqExpr{
							pos: position{line: 242, col: 4, offset: 6289},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 242, col: 4, offset: 6289},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 6294},
										name: "GroupExp",
									},
								},
								&labeledExpr{
									pos:   position{line: 242, col: 18, offset: 6303},
									label: "op",
									expr: &zeroOrOneExpr{
										pos: position{line: 242, col: 21, offset: 6306},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 21, offset: 6306},
											name: "OperatorExp",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 242, col: 34, offset: 6319},
									label: "right",
									expr: &oneOrMoreExpr{
										pos: position{line: 242, col: 40, offset: 6325},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 40, offset: 6325},
											name: "Node",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 4, offset: 6967},
						run: (*parser).callonNode23,
						expr: &labeledExpr{
							pos:   position{line: 268, col: 4, offset: 6967},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 7, offset: 6970},
								name: "GroupExp",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupExp",
			pos:  position{line: 273, col: 1, offset: 7014},
			expr: &choiceExpr{
				pos: position{line: 274, col: 5, offset: 7027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 274, col: 5, offset: 7027},
						run: (*parser).callonGroupExp2,
						expr: &seqExpr{
							pos: position{line: 274, col: 5, offset: 7027},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 274, col: 5, offset: 7027},
									label: "exp",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 9, offset: 7031},
										name: "FieldExp",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 274, col: 18, offset: 7040},
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 18, offset: 7040},
										name: "_",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7083},
						name: "ParenExp",
					},
				},
			},
		},
		{
			name: "ParenExp",
			pos:  position{line: 280, col: 1, offset: 7093},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 7106},
				run: (*parser).callonParenExp1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 7106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 7106},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 9, offset: 7110},
							label: "node",
							expr: &oneOrMoreExpr{
								pos: position{line: 281, col: 14, offset: 7115},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 14, offset: 7115},
									name: "Node",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 20, offset: 7121},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 24, offset: 7125},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 24, offset: 7125},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExp",
			pos:  position{line: 289, col: 1, offset: 7267},
			expr: &choiceExpr{
				pos: position{line: 290, col: 5, offset: 7280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 7280},
						run: (*parser).callonFieldExp2,
						expr: &seqExpr{
							pos: position{line: 290, col: 5, offset: 7280},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 290, col: 5, offset: 7280},
									label: "fieldname",
									expr: &zeroOrOneExpr{
										pos: position{line: 290, col: 15, offset: 7290},
										expr: &ruleRefExpr{
											pos:  position{line: 290, col: 15, offset: 7290},
											name: "Fieldname",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 290, col: 26, offset: 7301},
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 26, offset: 7301},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 290, col: 29, offset: 7304},
									label: "arr",
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 33, offset: 7308},
										name: "ArrayExp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 7486},
						run: (*parser).callonFieldExp11,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 7486},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 299, col: 5, offset: 7486},
									label: "fieldname",
									expr: &zeroOrOneExpr{
										pos: position{line: 299, col: 15, offset: 7496},
										expr: &ruleRefExpr{
											pos:  position{line: 299, col: 15, offset: 7496},
											name: "Fieldname",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 299, col: 26, offset: 7507},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 26, offset: 7507},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 299, col: 29, offset: 7510},
									label: "rangeValue",
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 40, offset: 7521},
										name: "RangeOperatorExp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 7735},
						run: (*parser).callonFieldExp20,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 7735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 308, col: 5, offset: 7735},
									label: "fieldname",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 15, offset: 7745},
										name: "Fieldname",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 308, col: 25, offset: 7755},
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 25, offset: 7755},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 308, col: 28, offset: 7758},
									label: "node",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 33, offset: 7763},
										name: "ParenExp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 5, offset: 7990},
						run: (*parser).callonFieldExp28,
						expr: &seqExpr{
							pos: position{line: 317, col: 5, offset: 7990},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 317, col: 5, offset: 7990},
									label: "fieldname",
									expr: &zeroOrOneExpr{
										pos: position{line: 317, col: 15, offset: 8000},
										expr: &ruleRefExpr{
											pos:  position{line: 317, col: 15, offset: 8000},
											name: "Fieldname",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 317, col: 26, offset: 8011},
									expr: &ruleRefExpr{
										pos:  position{line: 317, col: 26, offset: 8011},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 317, col: 29, offset: 8014},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 317, col: 34, offset: 8019},
										name: "Term",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fieldname",
			pos:  position{line: 324, col: 1, offset: 8133},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 8147},
				run: (*parser).callonFieldname1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 8147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 8147},
							label: "fieldname",
							expr: &choiceExpr{
								pos: position{line: 325, col: 16, offset: 8158},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 325, col: 16, offset: 8158},
										name: "UnquotedTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 325, col: 31, offset: 8173},
										name: "QuotedTerm",
									},
								},
							},
						},
						&charClassMatcher{
							pos:        position{line: 325, col: 43, offset: 8185},
							val:        "[:]",
							chars:      []rune{':'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 330, col: 1, offset: 8232},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 8241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 8241},
						run: (*parser).callonTerm2,
						expr: &seqExpr{
							pos: position{line: 331, col: 5, offset: 8241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 331, col: 5, offset: 8241},
									label: "eq",
									expr: &zeroOrOneExpr{
										pos: position{line: 331, col: 8, offset: 8244},
										expr: &ruleRefExpr{
											pos:  position{line: 331, col: 8, offset: 8244},
											name: "EqualityExpr",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 331, col: 22, offset: 8258},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 27, offset: 8263},
										name: "DecimalOrIntExp",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 331, col: 43, offset: 8279},
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 43, offset: 8279},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 8396},
						run: (*parser).callonTerm11,
						expr: &seqExpr{
							pos: position{line: 338, col: 5, offset: 8396},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 338, col: 5, offset: 8396},
									label: "eq",
									expr: &zeroOrOneExpr{
										pos: position{line: 338, col: 8, offset: 8399},
										expr: &ruleRefExpr{
											pos:  position{line: 338, col: 8, offset: 8399},
											name: "EqualityExpr",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 338, col: 22, offset: 8413},
									label: "op",
									expr: &zeroOrOneExpr{
										pos: position{line: 338, col: 25, offset: 8416},
										expr: &ruleRefExpr{
											pos:  position{line: 338, col: 25, offset: 8416},
											name: "PrefixOperatorExp",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 338, col: 44, offset: 8435},
									label: "term",
									expr: &choiceExpr{
										pos: position{line: 338, col: 50, offset: 8441},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 338, col: 50, offset: 8441},
												name: "Null",
											},
											&ruleRefExpr{
												pos:  position{line: 338, col: 57, offset: 8448},
												name: "Bool",
											},
											&ruleRefExpr{
												pos:  position{line: 338, col: 64, offset: 8455},
												name: "DecimalOrIntExp",
											},
											&ruleRefExpr{
												pos:  position{line: 338, col: 82, offset: 8473},
												name: "WildCardExp",
											},
											&ruleRefExpr{
												pos:  position{line: 338, col: 96, offset: 8487},
												name: "QuotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 338, col: 109, offset: 8500},
												name: "UnquotedTerm",
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 338, col: 123, offset: 8514},
									expr: &ruleRefExpr{
										pos:  position{line: 338, col: 123, offset: 8514},
										name: "_",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedTerm",
			pos:  position{line: 347, col: 1, offset: 8666},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 8683},
				run: (*parser).callonUnquotedTerm1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 5, offset: 8683},
					label: "term",
					expr: &oneOrMoreExpr{
						pos: position{line: 348, col: 10, offset: 8688},
						expr: &ruleRefExpr{
							pos:  position{line: 348, col: 10, offset: 8688},
							name: "TermChar",
						},
					},
				},
			},
		},
		{
			name: "TermChar",
			pos:  position{line: 353, col: 1, offset: 8747},
			expr: &choiceExpr{
				pos: position{line: 354, col: 5, offset: 8760},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 354, col: 5, offset: 8760},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&charClassMatcher{
						pos:        position{line: 354, col: 11, offset: 8766},
						val:        "[^: \\t\\r\\n)({}\"^~\\\\[\\]*+-]",
						chars:      []rune{':', ' ', '\t', '\r', '\n', ')', '(', '{', '}', '"', '^', '~', '\\', '[', ']', '*', '+', '-'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTerm",
			pos:  position{line: 356, col: 1, offset: 8794},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 8809},
				run: (*parser).callonQuotedTerm1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 8809},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 8809},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 9, offset: 8813},
							expr: &choiceExpr{
								pos: position{line: 357, col: 10, offset: 8814},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 357, col: 10, offset: 8814},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 357, col: 10, offset: 8814},
												expr: &ruleRefExpr{
													pos:  position{line: 357, col: 11, offset: 8815},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 357, col: 23, offset: 8827,
											},
										},
									},
									&seqExpr{
										pos: position{line: 357, col: 27, offset: 8831},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 357, col: 27, offset: 8831},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 357, col: 32, offset: 8836},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 49, offset: 8853},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayValue",
			pos:  position{line: 363, col: 1, offset: 8987},
			expr: &actionExpr{
				pos: position{line: 363, col: 15, offset: 9001},
				run: (*parser).callonArrayValue1,
				expr: &seqExpr{
					pos: position{line: 363, col: 15, offset: 9001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 15, offset: 9001},
							label: "val",
							expr: &choiceExpr{
								pos: position{line: 363, col: 20, offset: 9006},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 363, col: 20, offset: 9006},
										name: "Null",
									},
									&ruleRefExpr{
										pos:  position{line: 363, col: 27, offset: 9013},
										name: "Bool",
									},
									&ruleRefExpr{
										pos:  position{line: 363, col: 33, offset: 9019},
										name: "DecimalOrIntExp",
									},
									&ruleRefExpr{
										pos:  position{line: 363, col: 51, offset: 9037},
										name: "QuotedTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 363, col: 64, offset: 9050},
										name: "UnquotedTerm",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 363, col: 79, offset: 9065},
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 79, offset: 9065},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrayExp",
			pos:  position{line: 367, col: 1, offset: 9093},
			expr: &actionExpr{
				pos: position{line: 367, col: 13, offset: 9105},
				run: (*parser).callonArrayExp1,
				expr: &seqExpr{
					pos: position{line: 367, col: 13, offset: 9105},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 13, offset: 9105},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 17, offset: 9109},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 17, offset: 9109},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 20, offset: 9112},
							label: "vals",
							expr: &zeroOrOneExpr{
								pos: position{line: 367, col: 25, offset: 9117},
								expr: &seqExpr{
									pos: position{line: 367, col: 26, offset: 9118},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 26, offset: 9118},
											name: "ArrayValue",
										},
										&zeroOrMoreExpr{
											pos: position{line: 367, col: 37, offset: 9129},
											expr: &seqExpr{
												pos: position{line: 367, col: 38, offset: 9130},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 367, col: 38, offset: 9130},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 367, col: 42, offset: 9134},
														expr: &ruleRefExpr{
															pos:  position{line: 367, col: 42, offset: 9134},
															name: "_",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 367, col: 45, offset: 9137},
														name: "ArrayValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 60, offset: 9152},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 60, offset: 9152},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 63, offset: 9155},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "DecimalOrIntExp",
			pos:  position{line: 381, col: 1, offset: 9461},
			expr: &choiceExpr{
				pos: position{line: 382, col: 4, offset: 9480},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 382, col: 4, offset: 9480},
						name: "DecimalExp",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 4, offset: 9494},
						name: "IntExp",
					},
				},
			},
		},
		{
			name: "DecimalExp",
			pos:  position{line: 386, col: 1, offset: 9503},
			expr: &actionExpr{
				pos: position{line: 387, col: 4, offset: 9517},
				run: (*parser).callonDecimalExp1,
				expr: &seqExpr{
					pos: position{line: 387, col: 4, offset: 9517},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 387, col: 4, offset: 9517},
							expr: &litMatcher{
								pos:        position{line: 387, col: 4, offset: 9517},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 387, col: 9, offset: 9522},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 9, offset: 9522},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 16, offset: 9529},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 387, col: 20, offset: 9533},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 20, offset: 9533},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntExp",
			pos:  position{line: 392, col: 1, offset: 9630},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 9641},
				run: (*parser).callonIntExp1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 9641},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 393, col: 5, offset: 9641},
							expr: &litMatcher{
								pos:        position{line: 393, col: 5, offset: 9641},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 393, col: 10, offset: 9646},
							expr: &charClassMatcher{
								pos:        position{line: 393, col: 10, offset: 9646},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "RangeOperatorExp",
			pos:  position{line: 398, col: 1, offset: 9711},
			expr: &choiceExpr{
				pos: position{line: 399, col: 6, offset: 9733},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 399, col: 6, offset: 9733},
						run: (*parser).callonRangeOperatorExp2,
						expr: &seqExpr{
							pos: position{line: 399, col: 6, offset: 9733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 6, offset: 9733},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 399, col: 11, offset: 9738},
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 9738},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 399, col: 14, offset: 9741},
									label: "termMin",
									expr: &choiceExpr{
										pos: position{line: 399, col: 23, offset: 9750},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 399, col: 23, offset: 9750},
												name: "DecimalOrIntExp",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 41, offset: 9768},
												name: "WildCard",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 52, offset: 9779},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 67, offset: 9794},
												name: "QuotedTerm",
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 399, col: 79, offset: 9806},
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 79, offset: 9806},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 399, col: 82, offset: 9809},
									val:        "TO",
									ignoreCase: false,
									want:       "\"TO\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 399, col: 87, offset: 9814},
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 87, offset: 9814},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 399, col: 90, offset: 9817},
									label: "termMax",
									expr: &choiceExpr{
										pos: position{line: 399, col: 99, offset: 9826},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 399, col: 99, offset: 9826},
												name: "DecimalOrIntExp",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 117, offset: 9844},
												name: "WildCard",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 128, offset: 9855},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 399, col: 143, offset: 9870},
												name: "QuotedTerm",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 399, col: 155, offset: 9882},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 407, col: 5, offset: 10038},
						run: (*parser).callonRangeOperatorExp25,
						expr: &seqExpr{
							pos: position{line: 407, col: 5, offset: 10038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 407, col: 5, offset: 10038},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 407, col: 9, offset: 10042},
									label: "termMin",
									expr: &choiceExpr{
										pos: position{line: 407, col: 18, offset: 10051},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 407, col: 18, offset: 10051},
												name: "DecimalOrIntExp",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 36, offset: 10069},
												name: "WildCard",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 47, offset: 10080},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 62, offset: 10095},
												name: "QuotedTerm",
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 407, col: 74, offset: 10107},
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 74, offset: 10107},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 77, offset: 10110},
									val:        "TO",
									ignoreCase: false,
									want:       "\"TO\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 407, col: 82, offset: 10115},
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 82, offset: 10115},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 407, col: 85, offset: 10118},
									label: "termMax",
									expr: &choiceExpr{
										pos: position{line: 407, col: 94, offset: 10127},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 407, col: 94, offset: 10127},
												name: "DecimalOrIntExp",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 112, offset: 10145},
												name: "WildCard",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 123, offset: 10156},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 138, offset: 10171},
												name: "QuotedTerm",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 151, offset: 10184},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OperatorExp",
			pos:  position{line: 416, col: 1, offset: 10337},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 10353},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 10353},
						run: (*parser).callonOperatorExp2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 10353},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 417, col: 5, offset: 10353},
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 5, offset: 10353},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 417, col: 8, offset: 10356},
									label: "operator",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 17, offset: 10365},
										name: "Operator",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 417, col: 26, offset: 10374},
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 26, offset: 10374},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 10434},
						run: (*parser).callonOperatorExp10,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 10434},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 421, col: 5, offset: 10434},
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 5, offset: 10434},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 421, col: 8, offset: 10437},
									label: "operator",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 17, offset: 10446},
										name: "Operator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 421, col: 26, offset: 10455},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityExpr",
			pos:  position{line: 426, col: 1, offset: 10513},
			expr: &actionExpr{
				pos: position{line: 427, col: 7, offset: 10532},
				run: (*parser).callonEqualityExpr1,
				expr: &seqExpr{
					pos: position{line: 427, col: 7, offset: 10532},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 7, offset: 10532},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 7, offset: 10532},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 10, offset: 10535},
							label: "eq",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 13, offset: 10538},
								name: "Equality",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 22, offset: 10547},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 22, offset: 10547},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 433, col: 1, offset: 10599},
			expr: &choiceExpr{
				pos: position{line: 434, col: 7, offset: 10614},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 7, offset: 10614},
						run: (*parser).callonEquality2,
						expr: &litMatcher{
							pos:        position{line: 434, col: 7, offset: 10614},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 435, col: 7, offset: 10648},
						run: (*parser).callonEquality4,
						expr: &litMatcher{
							pos:        position{line: 435, col: 7, offset: 10648},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 7, offset: 10682},
						run: (*parser).callonEquality6,
						expr: &litMatcher{
							pos:        position{line: 436, col: 7, offset: 10682},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 437, col: 7, offset: 10716},
						run: (*parser).callonEquality8,
						expr: &litMatcher{
							pos:        position{line: 437, col: 7, offset: 10716},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 7, offset: 10750},
						run: (*parser).callonEquality10,
						expr: &litMatcher{
							pos:        position{line: 438, col: 7, offset: 10750},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 7, offset: 10784},
						run: (*parser).callonEquality12,
						expr: &litMatcher{
							pos:        position{line: 439, col: 7, offset: 10784},
							val:        "!~*",
							ignoreCase: false,
							want:       "\"!~*\"",
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 7, offset: 10818},
						run: (*parser).callonEquality14,
						expr: &litMatcher{
							pos:        position{line: 440, col: 7, offset: 10818},
							val:        "!~",
							ignoreCase: false,
							want:       "\"!~\"",
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 7, offset: 10852},
						run: (*parser).callonEquality16,
						expr: &litMatcher{
							pos:        position{line: 441, col: 7, offset: 10852},
							val:        "~*",
							ignoreCase: false,
							want:       "\"~*\"",
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 7, offset: 10886},
						run: (*parser).callonEquality18,
						expr: &litMatcher{
							pos:        position{line: 442, col: 7, offset: 10886},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
					&litMatcher{
						pos:        position{line: 443, col: 7, offset: 10920},
						val:        "gte",
						ignoreCase: false,
						want:       "\"gte\"",
					},
					&litMatcher{
						pos:        position{line: 444, col: 7, offset: 10932},
						val:        "gt",
						ignoreCase: false,
						want:       "\"gt\"",
					},
					&litMatcher{
						pos:        position{line: 445, col: 7, offset: 10943},
						val:        "lte",
						ignoreCase: false,
						want:       "\"lte\"",
					},
					&litMatcher{
						pos:        position{line: 446, col: 7, offset: 10955},
						val:        "lt",
						ignoreCase: false,
						want:       "\"lt\"",
					},
					&litMatcher{
						pos:        position{line: 447, col: 7, offset: 10966},
						val:        "eq",
						ignoreCase: false,
						want:       "\"eq\"",
					},
					&litMatcher{
						pos:        position{line: 448, col: 7, offset: 10977},
						val:        "neq",
						ignoreCase: false,
						want:       "\"neq\"",
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 450, col: 1, offset: 10984},
			expr: &choiceExpr{
				pos: position{line: 451, col: 5, offset: 10997},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 451, col: 5, offset: 10997},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&litMatcher{
						pos:        position{line: 452, col: 5, offset: 11006},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&litMatcher{
						pos:        position{line: 453, col: 5, offset: 11016},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&actionExpr{
						pos: position{line: 454, col: 5, offset: 11026},
						run: (*parser).callonOperator5,
						expr: &litMatcher{
							pos:        position{line: 454, col: 5, offset: 11026},
							val:        "||",
							ignoreCase: false,
							want:       "\"||\"",
						},
					},
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 11057},
						run: (*parser).callonOperator7,
						expr: &litMatcher{
							pos:        position{line: 455, col: 5, offset: 11057},
							val:        "&&",
							ignoreCase: false,
							want:       "\"&&\"",
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 11089},
						run: (*parser).callonOperator9,
						expr: &litMatcher{
							pos:        position{line: 456, col: 5, offset: 11089},
							val:        "and",
							ignoreCase: false,
							want:       "\"and\"",
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 5, offset: 11121},
						run: (*parser).callonOperator11,
						expr: &litMatcher{
							pos:        position{line: 457, col: 5, offset: 11121},
							val:        "or",
							ignoreCase: false,
							want:       "\"or\"",
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 5, offset: 11152},
						run: (*parser).callonOperator13,
						expr: &litMatcher{
							pos:        position{line: 458, col: 5, offset: 11152},
							val:        "not",
							ignoreCase: false,
							want:       "\"not\"",
						},
					},
				},
			},
		},
		{
			name: "PrefixOperatorExp",
			pos:  position{line: 460, col: 1, offset: 11181},
			expr: &actionExpr{
				pos: position{line: 461, col: 5, offset: 11203},
				run: (*parser).callonPrefixOperatorExp1,
				expr: &seqExpr{
					pos: position{line: 461, col: 5, offset: 11203},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 461, col: 5, offset: 11203},
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 5, offset: 11203},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 461, col: 8, offset: 11206},
							label: "operator",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 17, offset: 11215},
								name: "PrefixOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "PrefixOperator",
			pos:  position{line: 466, col: 1, offset: 11284},
			expr: &choiceExpr{
				pos: position{line: 467, col: 5, offset: 11303},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 467, col: 5, offset: 11303},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&litMatcher{
						pos:        position{line: 468, col: 5, offset: 11311},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 470, col: 1, offset: 11316},
			expr: &charClassMatcher{
				pos:        position{line: 470, col: 16, offset: 11331},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 472, col: 1, offset: 11347},
			expr: &choiceExpr{
				pos: position{line: 472, col: 19, offset: 11365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 472, col: 19, offset: 11365},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 38, offset: 11384},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 474, col: 1, offset: 11399},
			expr: &charClassMatcher{
				pos:        position{line: 474, col: 21, offset: 11419},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 476, col: 1, offset: 11432},
			expr: &litMatcher{
				pos:        position{line: 476, col: 18, offset: 11449},
				val:        "u",
				ignoreCase: false,
				want:       "\"u\"",
			},
		},
		{
			name: "Bool",
			pos:  position{line: 478, col: 1, offset: 11454},
			expr: &choiceExpr{
				pos: position{line: 478, col: 9, offset: 11462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 478, col: 9, offset: 11462},
						run: (*parser).callonBool2,
						expr: &litMatcher{
							pos:        position{line: 478, col: 9, offset: 11462},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 39, offset: 11492},
						run: (*parser).callonBool4,
						expr: &litMatcher{
							pos:        position{line: 478, col: 39, offset: 11492},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "Null",
			pos:  position{line: 480, col: 1, offset: 11523},
			expr: &actionExpr{
				pos: position{line: 480, col: 9, offset: 11531},
				run: (*parser).callonNull1,
				expr: &litMatcher{
					pos:        position{line: 480, col: 9, offset: 11531},
					val:        "null",
					ignoreCase: false,
					want:       "\"null\"",
				},
			},
		},
		{
			name: "WildCard",
			pos:  position{line: 482, col: 1, offset: 11559},
			expr: &actionExpr{
				pos: position{line: 482, col: 13, offset: 11571},
				run: (*parser).callonWildCard1,
				expr: &litMatcher{
					pos:        position{line: 482, col: 13, offset: 11571},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "WildCardExp",
			pos:  position{line: 484, col: 1, offset: 11596},
			expr: &choiceExpr{
				pos: position{line: 486, col: 6, offset: 11619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 486, col: 6, offset: 11619},
						run: (*parser).callonWildCardExp2,
						expr: &seqExpr{
							pos: position{line: 486, col: 6, offset: 11619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 486, col: 6, offset: 11619},
									label: "prefix",
									expr: &choiceExpr{
										pos: position{line: 486, col: 14, offset: 11627},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 486, col: 14, offset: 11627},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 486, col: 29, offset: 11642},
												name: "QuotedTerm",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 486, col: 41, offset: 11654},
									name: "WildCard",
								},
								&labeledExpr{
									pos:   position{line: 486, col: 50, offset: 11663},
									label: "suffix",
									expr: &choiceExpr{
										pos: position{line: 486, col: 58, offset: 11671},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 486, col: 58, offset: 11671},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 486, col: 73, offset: 11686},
												name: "QuotedTerm",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 7, offset: 11791},
						run: (*parser).callonWildCardExp13,
						expr: &seqExpr{
							pos: position{line: 487, col: 7, offset: 11791},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 487, col: 7, offset: 11791},
									label: "term",
									expr: &choiceExpr{
										pos: position{line: 487, col: 13, offset: 11797},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 487, col: 13, offset: 11797},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 487, col: 28, offset: 11812},
												name: "QuotedTerm",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 487, col: 40, offset: 11824},
									name: "WildCard",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 488, col: 7, offset: 11896},
						run: (*parser).callonWildCardExp20,
						expr: &seqExpr{
							pos: position{line: 488, col: 7, offset: 11896},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 488, col: 7, offset: 11896},
									name: "WildCard",
								},
								&labeledExpr{
									pos:   position{line: 488, col: 16, offset: 11905},
									label: "term",
									expr: &choiceExpr{
										pos: position{line: 488, col: 22, offset: 11911},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 488, col: 22, offset: 11911},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 488, col: 37, offset: 11926},
												name: "QuotedTerm",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 488, col: 49, offset: 11938},
									name: "WildCard",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 7, offset: 12007},
						run: (*parser).callonWildCardExp28,
						expr: &seqExpr{
							pos: position{line: 489, col: 7, offset: 12007},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 489, col: 7, offset: 12007},
									name: "WildCard",
								},
								&labeledExpr{
									pos:   position{line: 489, col: 16, offset: 12016},
									label: "term",
									expr: &choiceExpr{
										pos: position{line: 489, col: 22, offset: 12022},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 489, col: 22, offset: 12022},
												name: "UnquotedTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 37, offset: 12037},
												name: "QuotedTerm",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 490, col: 7, offset: 12112},
						run: (*parser).callonWildCardExp35,
						expr: &ruleRefExpr{
							pos:  position{line: 490, col: 7, offset: 12112},
							name: "WildCard",
						},
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 492, col: 1, offset: 12155},
			expr: &oneOrMoreExpr{
				pos: position{line: 492, col: 19, offset: 12173},
				expr: &charClassMatcher{
					pos:        position{line: 492, col: 19, offset: 12173},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 494, col: 1, offset: 12185},
			expr: &notExpr{
				pos: position{line: 494, col: 8, offset: 12192},
				expr: &anyMatcher{
					line: 494, col: 9, offset: 12193,
				},
			},
		},
	},
}

func (c *current) onStart2(node interface{}) (interface{}, error) {
	return toFlatSlice(toIfaceSlice(node)), nil

}

func (p *parser) callonStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart2(stack["node"])
}

func (c *current) onStart9() (interface{}, error) {
	return nil, errors.New("invalid query")

}

func (p *parser) callonStart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart9()
}

func (c *current) onStart12() (interface{}, error) {
	return nil, errors.New("invalid query")

}

func (p *parser) callonStart12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart12()
}

func (c *current) onNode2(operator interface{}) (interface{}, error) {
	return BooleanExpression{
		Op: toIfaceStr(operator),
	}, nil

}

func (p *parser) callonNode2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNode2(stack["operator"])
}

func (c *current) onNode7(operator, right interface{}) (interface{}, error) {
	return right, nil

}

func (p *parser) callonNode7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNode7(stack["operator"], stack["right"])
}

func (c *current) onNode13(left, op, right interface{}) (interface{}, error) {
	operator := strings.TrimSpace(toIfaceStr(op))
	if operator == "" {
		operator = "IMPLICIT"
	}
	ex := BooleanExpression{
		Op: operator,
	}
	var args []interface{}

	if l, ok := left.([]interface{}); ok {
		args = append(args, l...)
	} else {
		args = append(args, left)
	}
	for _, s := range toIfaceSlice(right) {
		if l, ok := s.([]interface{}); ok {
			args = append(args, l...)
		} else {
			args = append(args, s)
		}
	}
	ex.Args = args
	return ex, nil

}

func (p *parser) callonNode13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNode13(stack["left"], stack["op"], stack["right"])
}

func (c *current) onNode23(ex interface{}) (interface{}, error) {
	return ex, nil

}

func (p *parser) callonNode23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNode23(stack["ex"])
}

func (c *current) onGroupExp2(exp interface{}) (interface{}, error) {
	return exp, nil

}

func (p *parser) callonGroupExp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupExp2(stack["exp"])
}

func (c *current) onParenExp1(node interface{}) (interface{}, error) {
	if n, ok := node.([]interface{}); ok && len(n) == 1 {
		return n[0], nil
	}
	return node, nil

}

func (p *parser) callonParenExp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExp1(stack["node"])
}

func (c *current) onFieldExp2(fieldname, arr interface{}) (interface{}, error) {
	return TermQuery{
		Term:   toIfaceStr(fieldname),
		Value:  arr,
		Prefix: "",
		Op:     "in",
	}, nil

}

func (p *parser) callonFieldExp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExp2(stack["fieldname"], stack["arr"])
}

func (c *current) onFieldExp11(fieldname, rangeValue interface{}) (interface{}, error) {
	r, ok := rangeValue.(RangeQuery)
	if !ok {
		return nil, errors.New("invalid range")
	}
	r.Term = toIfaceStr(fieldname)
	return r, nil

}

func (p *parser) callonFieldExp11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExp11(stack["fieldname"], stack["rangeValue"])
}

func (c *current) onFieldExp20(fieldname, node interface{}) (interface{}, error) {
	field := toIfaceStr(fieldname)
	if n, ok := node.(TermQuery); ok {
		n.Term = field
		return n.Query(), nil
	}
	return updateFieldName(node, field), nil

}

func (p *parser) callonFieldExp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExp20(stack["fieldname"], stack["node"])
}

func (c *current) onFieldExp28(fieldname, term interface{}) (interface{}, error) {
	t := term.(TermQuery)
	t.Term = toIfaceStr(fieldname)
	return t.Query(), nil

}

func (p *parser) callonFieldExp28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExp28(stack["fieldname"], stack["term"])
}

func (c *current) onFieldname1(fieldname interface{}) (interface{}, error) {
	return fieldname, nil

}

func (p *parser) callonFieldname1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldname1(stack["fieldname"])
}

func (c *current) onTerm2(eq, term interface{}) (interface{}, error) {
	return TermQuery{
		Value: term,
		Op:    toIfaceStr(eq),
	}, nil

}

func (p *parser) callonTerm2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm2(stack["eq"], stack["term"])
}

func (c *current) onTerm11(eq, op, term interface{}) (interface{}, error) {
	return TermQuery{
		Value:  term,
		Prefix: toIfaceStr(op),
		Op:     toIfaceStr(eq),
	}, nil

}

func (p *parser) callonTerm11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm11(stack["eq"], stack["op"], stack["term"])
}

func (c *current) onUnquotedTerm1(term interface{}) (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedTerm1(stack["term"])
}

func (c *current) onQuotedTerm1() (interface{}, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	return strconv.Unquote(string(c.text))

}

func (p *parser) callonQuotedTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTerm1()
}

func (c *current) onArrayValue1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonArrayValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayValue1(stack["val"])
}

func (c *current) onArrayExp1(vals interface{}) (interface{}, error) {
	valsSl := toIfaceSlice(vals)
	if len(valsSl) == 0 {
		return []interface{}{}, nil
	}
	res := []interface{}{valsSl[0]}
	restSl := toIfaceSlice(valsSl[1])
	for _, v := range restSl {
		vSl := toIfaceSlice(v)
		res = append(res, vSl[2])
	}
	return res, nil
}

func (p *parser) callonArrayExp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayExp1(stack["vals"])
}

func (c *current) onDecimalExp1() (interface{}, error) {
	return strconv.ParseFloat(strings.TrimSpace(toIfaceStr(c.text)), 64)

}

func (p *parser) callonDecimalExp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimalExp1()
}

func (c *current) onIntExp1() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonIntExp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntExp1()
}

func (c *current) onRangeOperatorExp2(termMin, termMax interface{}) (interface{}, error) {
	return RangeQuery{
		Min:       termMin,
		Max:       termMax,
		Inclusive: true,
	}, nil

}

func (p *parser) callonRangeOperatorExp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperatorExp2(stack["termMin"], stack["termMax"])
}

func (c *current) onRangeOperatorExp25(termMin, termMax interface{}) (interface{}, error) {
	return RangeQuery{
		Min:       termMin,
		Max:       termMax,
		Inclusive: false,
	}, nil

}

func (p *parser) callonRangeOperatorExp25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeOperatorExp25(stack["termMin"], stack["termMax"])
}

func (c *current) onOperatorExp2(operator interface{}) (interface{}, error) {
	return toIfaceStr(operator), nil

}

func (p *parser) callonOperatorExp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperatorExp2(stack["operator"])
}

func (c *current) onOperatorExp10(operator interface{}) (interface{}, error) {
	return toIfaceStr(operator), nil

}

func (p *parser) callonOperatorExp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperatorExp10(stack["operator"])
}

func (c *current) onEqualityExpr1(eq interface{}) (interface{}, error) {
	return toIfaceStr(eq), nil

}

func (p *parser) callonEqualityExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityExpr1(stack["eq"])
}

func (c *current) onEquality2() (interface{}, error) {
	return "gte", nil
}

func (p *parser) callonEquality2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality2()
}

func (c *current) onEquality4() (interface{}, error) {
	return "gt", nil
}

func (p *parser) callonEquality4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality4()
}

func (c *current) onEquality6() (interface{}, error) {
	return "lte", nil
}

func (p *parser) callonEquality6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality6()
}

func (c *current) onEquality8() (interface{}, error) {
	return "lt", nil
}

func (p *parser) callonEquality8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality8()
}

func (c *current) onEquality10() (interface{}, error) {
	return "neq", nil
}

func (p *parser) callonEquality10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality10()
}

func (c *current) onEquality12() (interface{}, error) {
	return "!~*", nil
}

func (p *parser) callonEquality12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality12()
}

func (c *current) onEquality14() (interface{}, error) {
	return "!~", nil
}

func (p *parser) callonEquality14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality14()
}

func (c *current) onEquality16() (interface{}, error) {
	return "~*", nil
}

func (p *parser) callonEquality16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality16()
}

func (c *current) onEquality18() (interface{}, error) {
	return "~", nil
}

func (p *parser) callonEquality18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality18()
}

func (c *current) onOperator5() (interface{}, error) {
	return "OR", nil
}

func (p *parser) callonOperator5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperator5()
}

func (c *current) onOperator7() (interface{}, error) {
	return "AND", nil
}

func (p *parser) callonOperator7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperator7()
}

func (c *current) onOperator9() (interface{}, error) {
	return "AND", nil
}

func (p *parser) callonOperator9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperator9()
}

func (c *current) onOperator11() (interface{}, error) {
	return "OR", nil
}

func (p *parser) callonOperator11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperator11()
}

func (c *current) onOperator13() (interface{}, error) {
	return "NOT", nil
}

func (p *parser) callonOperator13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperator13()
}

func (c *current) onPrefixOperatorExp1(operator interface{}) (interface{}, error) {
	return toIfaceStr(operator), nil

}

func (p *parser) callonPrefixOperatorExp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrefixOperatorExp1(stack["operator"])
}

func (c *current) onBool2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonBool2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool2()
}

func (c *current) onBool4() (interface{}, error) {
	return false, nil
}

func (p *parser) callonBool4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool4()
}

func (c *current) onNull1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonNull1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onWildCard1() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonWildCard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCard1()
}

func (c *current) onWildCardExp2(prefix, suffix interface{}) (interface{}, error) {
	return WildCardQuery{Prefix: toIfaceStr(prefix), Suffix: toIfaceStr(suffix)}, nil
}

func (p *parser) callonWildCardExp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCardExp2(stack["prefix"], stack["suffix"])
}

func (c *current) onWildCardExp13(term interface{}) (interface{}, error) {
	return WildCardQuery{Prefix: toIfaceStr(term)}, nil
}

func (p *parser) callonWildCardExp13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCardExp13(stack["term"])
}

func (c *current) onWildCardExp20(term interface{}) (interface{}, error) {
	return WildCardQuery{Term: toIfaceStr(term)}, nil
}

func (p *parser) callonWildCardExp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCardExp20(stack["term"])
}

func (c *current) onWildCardExp28(term interface{}) (interface{}, error) {
	return WildCardQuery{Suffix: toIfaceStr(term)}, nil
}

func (p *parser) callonWildCardExp28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCardExp28(stack["term"])
}

func (c *current) onWildCardExp35() (interface{}, error) {
	return WildCardQuery{}, nil
}

func (p *parser) callonWildCardExp35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildCardExp35()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
